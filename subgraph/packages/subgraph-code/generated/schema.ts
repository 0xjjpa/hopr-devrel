// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Account entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Account entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Account", id.toString(), this);
  }

  static load(id: string): Account | null {
    return store.get("Account", id) as Account | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get multiaddr(): Bytes | null {
    let value = this.get("multiaddr");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set multiaddr(value: Bytes | null) {
    if (value === null) {
      this.unset("multiaddr");
    } else {
      this.set("multiaddr", Value.fromBytes(value as Bytes));
    }
  }

  get channels(): Array<string | null> {
    let value = this.get("channels");
    return value.toStringArray();
  }

  set channels(value: Array<string | null>) {
    this.set("channels", Value.fromStringArray(value));
  }

  get hasAnnounced(): boolean {
    let value = this.get("hasAnnounced");
    return value.toBoolean();
  }

  set hasAnnounced(value: boolean) {
    this.set("hasAnnounced", Value.fromBoolean(value));
  }
}

export class Channel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Channel entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Channel entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Channel", id.toString(), this);
  }

  static load(id: string): Channel | null {
    return store.get("Channel", id) as Channel | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get source(): string {
    let value = this.get("source");
    return value.toString();
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }

  get destination(): string {
    let value = this.get("destination");
    return value.toString();
  }

  set destination(value: string) {
    this.set("destination", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get commitment(): Bytes {
    let value = this.get("commitment");
    return value.toBytes();
  }

  set commitment(value: Bytes) {
    this.set("commitment", Value.fromBytes(value));
  }

  get ticketEpoch(): BigInt {
    let value = this.get("ticketEpoch");
    return value.toBigInt();
  }

  set ticketEpoch(value: BigInt) {
    this.set("ticketEpoch", Value.fromBigInt(value));
  }

  get ticketIndex(): BigInt {
    let value = this.get("ticketIndex");
    return value.toBigInt();
  }

  set ticketIndex(value: BigInt) {
    this.set("ticketIndex", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get openedAt(): BigInt | null {
    let value = this.get("openedAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set openedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("openedAt");
    } else {
      this.set("openedAt", Value.fromBigInt(value as BigInt));
    }
  }

  get closedAt(): BigInt | null {
    let value = this.get("closedAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("closedAt");
    } else {
      this.set("closedAt", Value.fromBigInt(value as BigInt));
    }
  }
}
